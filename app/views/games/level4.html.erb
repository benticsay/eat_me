<script type="text/javascript">

  var game = new Phaser.Game(1024, 768, Phaser.AUTO, '', { preload: preload, create: create, update: update, render: render });

  function preload(){

    game.load.spritesheet('dude', '/images/dude.png', 32, 48);

    game.load.image('background', '/images/background.png');
    game.load.image('cloud1', '/images/cloud_1.png');
    game.load.image('cloud2', '/images/cloud_2.png');
    game.load.image('cloud3', '/images/cloud_3.png');
    game.load.image('cloud4', '/images/cloud_4.png');
    game.load.image('cloud5', '/images/cloud_5.png');
    game.load.image('cloud6', '/images/cloud_6.png');
    game.load.image('tree', '/images/tree.png');
    game.load.image('grass1', '/images/grass_1.png');
    game.load.image('smilingfrog', '/images/frog_mouth_open.png');
    game.load.image('frog', '/images/frog_mouth_closed.png');
    game.load.image('bird1', '/images/bird1.png');
    game.load.image('crosshair', '/images/crosshair.png');
    // game.load.spritesheet('bird2', '/images/bird2');
    // game.load.spritesheet('bird3', '/images/bird3');
    // game.load.spritesheet('fallingbird', '/images/fallingbird');
  }

  var platforms;

  function create(){

    game.physics.startSystem(Phaser.Physics.ARCADE);

    background = game.add.image(0, 0, 'background');
    background.scale.x = game.rnd.realInRange(4, 4);
    background.scale.y = game.rnd.realInRange(4, 4);

    crosshair = game.add.image(0, 0, 'crosshair');
    crosshair.scale.x = game.rnd.realInRange(.15, .15);
    crosshair.scale.y = game.rnd.realInRange(.15, .15);

    // cloud1 = game.add.image(0, 15, 'cloud1');
    // cloud1.anchor.setTo(-.1, -.1);

    // cloud2 = game.add.image(0, 380, 'cloud2');
    // cloud2.anchor.setTo(-.1, -.1);

    // cloud3 = game.add.image(335, 85, 'cloud3');
    // cloud3.anchor.setTo(-.1, -.1);

    // cloud4 = game.add.image(595, 270, 'cloud4');
    // cloud4.anchor.setTo(-.1, -.1);

    // cloud5 = game.add.image(650, 30, 'cloud5');
    // cloud5.anchor.setTo(-.1, -.1);

    // cloud6 = game.add.image(854, 258, 'cloud6');
    // cloud6.anchor.setTo(-.1, -.1);

    // game.add.image(25, 40, 'tree');

    cursors = game.input.keyboard.createCursorKeys();

    bird = game.add.sprite(780, game.world.height - 1000, 'bird1')
    game.physics.arcade.enable(bird);
    bird.anchor.set(0.5);

    bird.body.drag.set(100);
    bird.body.maxVelocity.set(200);

    bird.body.collideWorldBounds = true;

    bird.animations.add('left', [0, 1, 2], 6, true);
    bird.animations.add('right', [3, 4, 5], 6, true);

    game.physics.arcade.enable(acorn);

    bird.body.collideWorldBounds = true;

    cursors = game.input.keyboard.createCursorKeys();

  }

  function update(){

    // var breeze = setTimeout(cloudMovement1);
    // function cloudMovement1(){
    // cloud1.angle -= .03;
    // cloud2.angle += .03;
    // cloud3.angle += .03;
    // cloud4.angle += .03;
    // cloud5.angle -= .03;
    // cloud6.angle += .03;
    // var breeze = setTimeout(cloudMovement2, 3000)
    // }
    // function cloudMovement2(){
    // cloud1.angle += .06;
    // cloud2.angle -= .06;
    // cloud3.angle -= .06;
    // cloud4.angle -= .06;
    // cloud5.angle += .06;
    // cloud6.angle -= .06;
    // var breeze = setTimeout(cloudMovement3, 3000)
    // }
    // function cloudMovement3(){
    // cloud1.angle -= .06;
    // cloud2.angle += .06;
    // cloud3.angle += .06;
    // cloud4.angle += .06;
    // cloud5.angle -= .06;
    // cloud6.angle += .06;
    // var breeze = setTimeout(cloudMovement2, 3000)
    // }
    


    // game.physics.arcade.collide(bird, platforms);

    if (cursors.up.isDown)
    {
        game.physics.arcade.accelerationFromRotation(bird.rotation, 200, bird.body.acceleration);
    }
    else
    {
        bird.body.acceleration.set(0);
    }

    if (cursors.left.isDown)
    {
        bird.body.angularVelocity = -300;
    }
    else if (cursors.right.isDown)
    {
        bird.body.angularVelocity = 300;
    }
    else
    {
        bird.body.angularVelocity = 0;
    }

    if (cursors.up.isDown)
    {
        game.physics.arcade.accelerationFromRotation(bird.rotation, 200, bird.body.acceleration);
    }
    else
    {
        bird.body.acceleration.set(0);
    }

    if (cursors.left.isDown)
    {
        bird.body.angularVelocity = -300;
    }
    else if (cursors.right.isDown)
    {
        bird.body.angularVelocity = 300;
    }
    else
    {
        bird.body.angularVelocity = 0;
    }


  }

  function render(){


  }

  </script>