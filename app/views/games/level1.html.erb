<script type="text/javascript">

  var game = new Phaser.Game(1024, 768, Phaser.CANVAS, '', { preload: preload, create: create, update: update, render: render });



  function preload(){

    // todo: maybe load with offset *******************

    // images for level 1

    // invisible platforms
    game.load.image('invisible_line', '/images/blank_line.png');
    game.load.image('purp_line', '/images/purp_line.png');

    // background
    game.load.image('background', '/images/background.png');
    game.load.image('levelOneBackground', '/images/level1background-01.png');
    game.load.image('cloud3', '/images/cloud_3.png');
    game.load.image('cloud4', '/images/cloud_4.png');
    // interactables
    game.load.image('branch1', '/images/branch 1.png');
    game.load.image('branch2', '/images/branch 2.png');
    game.load.image('branch3', '/images/branch 3.png');
    game.load.image('branch4', '/images/branch 4.png');
    game.load.image('acorn1', '/images/acorn_1.png');
    game.load.image('acorn2', '/images/acorn_2.png');
    game.load.image('acorn3', '/images/acorn_3.png');
    game.load.image('acorn4', '/images/acorn_4.png');
    game.load.image('acorn5', '/images/acorn_5.png');
    game.load.image('acorn6', '/images/acorn_6.png');
    // animals
    game.load.image('spider', '/images/spider_bigger_face.png');
    game.load.spritesheet('fly', '/images/Tiny_flies_sheet.png', 19, 18);
    game.load.spritesheet('beetle', '/images/bug_sprite_sheet1.png', 95.2, 124);
  }

  var platforms;
    var acorns;
    var acorn2;
    var spider;

    var timer;
    var timer2;
    var total = 0;
    var total2 = 0;


  function create(){


    game.physics.startSystem(Phaser.Physics.ARCADE);
    // background image and scaled
    background = game.add.image(0, -500, 'background');
    background.scale.x = game.rnd.realInRange(4, 4);
    background.scale.y = game.rnd.realInRange(4, 4);

    game.add.image(0, 0, 'levelOneBackground');

    createCloud = function(x, y, xVelocity, image)
    {
        cloud = game.add.sprite(x, y, image);
        game.physics.arcade.enable(cloud);
        cloud.enableBody = true;
        cloud.body.immovable = true;
        cloud.body.collideWorldBounds = true;
        cloud.body.velocity.x = xVelocity;
        cloud.body.bounce.setTo(1, 1);
    }

    createCloud(755, 385, -3, 'cloud3');
    createCloud(35, 100, 5, 'cloud4');


    // tile = game.add.sprite(600, 480, 'branch-tiles', 3);
    // game.physics.ninja.enableTile(tile, tile.frame);

    // game.add.image(0, 0, 1024, 768, 'greenBackdrop');


    // background = game.add.image(0, 0, 1024, 768, 'levelOneBackground');


    platforms = game.add.group();

    platforms.enableBody = true;



    // game.physics.arcade.enable(acorns2);

    spider = game.add.sprite(90, -30, 'spider');
    game.physics.arcade.enable(spider);
    spider.enableBody = true;
    spider.scale.x = game.rnd.realInRange(.55, .55);
    spider.scale.y = game.rnd.realInRange(.55, .55);
    spider.body.immovable = true;

    // goal = game.add.sprite(90, 10, 'purp_line');
    // game.physics.arcade.enable(goal);
    // goal.enableBody = true;
    // goal.scale.x = game.rnd.realInRange(.55, .55);
    // goal.scale.y = game.rnd.realInRange(.55, .55);
    // goal.body.immovable = true;

    cursors = game.input.keyboard.createCursorKeys();

    
    function createBranch(x, y, image, size) {
        branch = game.add.image(x, y, image);
        branch.scale.x = game.rnd.realInRange(size, size);
        branch.scale.y = game.rnd.realInRange(size, size);
    }

    function createObject(x, y, image, size) {
        object = platforms.create(x, y, image);
        object.scale.x = game.rnd.realInRange(size, size);
        object.body.immovable = true;       
    }


    // left side
    createBranch(0, 108, 'branch1', 2);
    createObject(0, 120, 'purp_line', 6.5);

    // right side
    createBranch(410, 270, 'branch2', 2);
    createObject(415, 275, 'purp_line', 6.2);

    // left side
    createBranch(-50, 420, 'branch3', 2);
    createObject(-50, 440, 'purp_line', 7.30);

    // right side
    createBranch(410, 570, 'branch4', 2);
    createObject(455, 595, 'purp_line', 5.8);

    // ground
    createBranch(0, 746, 'branch2', 3);
    createObject(0, 755, 'purp_line', 11);
    
    acorns = game.add.group();
    acorns.enableBody = true;
    // game.physics.arcade.enable(acorns);

    function createAcorn(x, y, image, size, xVelocity){
    acorn = acorns.create(x, y, image);
    game.physics.arcade.enable(acorn);
    acorn.body.immovable = true;
    acorn.enableBody = true;
    acorn.scale.setTo(size, size);
    acorn.body.velocity.x = xVelocity;
    acorn.body.bounce.y = 0.1;
    }

    game.time.events.loop(Phaser.Timer.SECOND * 3, acornLaunch, this);
    acornLaunch();
    function acornLaunch() {
    var acorn_array = ["acorn1", "acorn2", "acorn3", "acorn4", "acorn5", "acorn6"]
    random_acorn = acorn_array[Math.floor(acorn_array.length * Math.random())];
        // shoot right
    createAcorn(-1500, 80, random_acorn, 1.2, 500);
        // shoot left
    createAcorn(2000, 245, random_acorn, 1.5, -500);
        // shoot right
    createAcorn(-500, 385, random_acorn, 1.5, 500);
        // shoot left
    createAcorn(1000, 530, random_acorn, 1.5, -500);
    }

    fly = game.add.sprite(10, 25, 'fly')
    fly.scale.x = game.rnd.realInRange(.8, .8);
    fly.scale.y = game.rnd.realInRange(.8, .8);
    game.physics.arcade.enable(fly);
    fly.animations.add('right', [0, 1], .5, true);
    fly.animations.add('left', [2, 3], .5, true);
    fly.animations.play('right');

    beetle = game.add.sprite(800, 690, 'beetle')
    beetle.scale.x = game.rnd.realInRange(.45, .45);
    beetle.scale.y = game.rnd.realInRange(.45, .45);
    game.physics.arcade.enable(beetle);

    beetle.body.bounce.y = 0.1;
    beetle.body.gravity.y = 350;
    beetle.body.collideWorldBounds = true;

    beetle.animations.add('left', [0, 1], 5, true);
    beetle.animations.add('right', [3, 4], 5, true);


    beetle.body.collideWorldBounds = true;
    acorn.body.collideWorldBounds = false;

    cursors = game.input.keyboard.createCursorKeys();

        //  Create our Timer
    timer = game.time.create(false);
    timer2 = game.time.create(false);

    //  Set a TimerEvent to occur after 2 seconds
    timer.loop(1000, updateCounter, this);
    timer2.loop(1, updateCounter2, this);

    //  Start the timer running - this is important!
    //  It won't start automatically, allowing you to hook it to button events and the like.
    timer.start();
    timer2.start();

  }



  function update(){

    game.physics.arcade.collide(beetle, platforms);
    game.physics.arcade.collide(acorn, platforms);
    game.physics.arcade.collide(beetle, acorns);
    game.physics.arcade.collide(platforms, platforms);
    // game.physics.arcade.collide(beetle, spider);

    game.physics.arcade.overlap(beetle, spider, winFunc, null, this);


// push state document

// or a normal ajax request

// to drop the current page tag from the dom and get the new svg tag


    function winFunc(beetle, spider){
        // add functionality for bug to seem to go behind spider and hit hidden div
        beetle.kill();
        timer.stop();
        timer2.stop();
        // insert timeout function
        spider.body.velocity.x = 0
        spider.body.velocity.y += 500
        console.log('WINNER!');

        var levelChange = function() {
           window.location.replace("http://reincarnage.herokuapp.com/games/level2")
       };

       $('body').fadeOut(3000, function(){levelChange();});

       // window.setTimeout(levelChange(), 4600);

       // $('body').fadeOut(4000, levelChange());
    

        // setTimeout(function(){$('body').fadeOut(4000; levelChange();}, 2000);

    }

    beetle.body.velocity.x = 0;

    if (cursors.left.isDown)
    {
        //  Move to the left
        beetle.body.velocity.x = -180;

        beetle.animations.play('left');
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        beetle.body.velocity.x = 180;

        beetle.animations.play('right');
    }
    else
    {
        //  Stand still
        beetle.animations.stop();

        beetle.frame = 2;
    }
    
    //  Allow the player to jump if they are touching the ground.
    if (cursors.up.isDown && beetle.body.touching.down)
    {
        beetle.body.velocity.y = -350;
    }



  }

function updateCounter() {

    total++;

}

function updateCounter2() {

    total2++;

}



  function render(){

    // game.debug.cameraInfo(game.camera, 32, 32);
    game.debug.text('TIME: ' + total + ':' + total2, 850, 20);
  }


  </script>




