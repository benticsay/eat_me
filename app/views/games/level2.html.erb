<br>
<h2>Avoid the branches to make your way down to the hungry frog (Controls: Left, Right, Up, Down)</h2>
<script type="text/javascript">

  var game = new Phaser.Game(1024, 768, Phaser.AUTO, '', { preload: preload, create: create, update: update, render: render });

  function preload(){
    var images = {
        'tree': '/images/tree.png',
        
    }
    // level 2 images

    // invisible platforms
    game.load.image('invisible_line', '/images/blank_line.png');
    game.load.image('purp_line', '/images/purp_line.png');

    // background
    game.load.image('background', '/images/background.png');
    game.load.image('cloud2', '/images/cloud_2.png');
    game.load.image('cloud5', '/images/cloud_5.png');

    // interactables
    game.load.image('branch1', '/images/h_branch_1.png');
    game.load.image('branch2', '/images/h_branch_2.png');
    game.load.image('branch3', '/images/h_branch_3.png');
    game.load.image('branch4', '/images/h_branch_4.png');
    game.load.image('branch5', '/images/branch 1.png');
    game.load.image('branch6', '/images/branch 2.png');
    game.load.image('branch7', '/images/branch 3.png');
    game.load.image('branch8', '/images/branch 4.png');
    // possibly add acorns attached to trees to add style (maybe make them interactive)
    // game.load.image('acorn1', '/images/acorn_1.png');
    // game.load.image('acorn2', '/images/acorn_2.png');
    // game.load.image('acorn3', '/images/acorn_3.png');
    // game.load.image('acorn4', '/images/acorn_4.png');
    // game.load.image('acorn5', '/images/acorn_5.png');

    // animals
    game.load.image('spider', '/images/spider_bigger_face.png');
    game.load.image('smilingFrog', '/images/frog_mouth_open.png');
    game.load.image('frog', '/images/frog_mouth_closed.png');
    //perhaps add flies as additional points for spider
    // game.load.spritesheet('fly', '/images/Tiny_flies_sheet.png');
  }

  var platforms;

    var timer;
    var timer2;
    var total = 0;
    var total2 = 0;

    var branch1;
 // branch2
 // branch3
//  var branch4
//  var branch5
//  var branch6
//  var branch7
//  var branch8
//  var branch9
// var branch10
// var branch11
// var branch12
// var branch13
// var branch14
// var branch15
// var branch16
// var branch17
// var branch18
// var branch19
// var branch20
// var branch21
// var branch22
// var branch23
// var branch24

  function create(){

    game.physics.startSystem(Phaser.Physics.ARCADE);

    // tree = game.add.image(-3300, -9000, 'level2background');
    // tree.scale.x = game.rnd.realInRange(19, 19);
    // tree.scale.y = game.rnd.realInRange(19, 19);

    // background image and scaled
    background = game.add.image(0, -1000, 'background');
    background.scale.x = game.rnd.realInRange(4, 4);
    background.scale.y = game.rnd.realInRange(4, 4);

    createCloud = function(x, y, xVelocity, image)
    {
        cloud = game.add.sprite(x, y, image);
        game.physics.arcade.enable(cloud);
        cloud.enableBody = true;
        cloud.body.immovable = true;
        cloud.body.collideWorldBounds = true;
        cloud.body.velocity.y = -5;
        cloud.body.velocity.x = xVelocity;
        cloud.body.bounce.setTo(1, 1);
    }

    createCloud(755, 445, -3, 'cloud2');
    createCloud(35, 280, 5, 'cloud5');

    platforms = game.add.group();

    platforms.enableBody = true;

    cursors = game.input.keyboard.createCursorKeys();




            frog = game.add.sprite(400, 800, 'smilingFrog');
            game.physics.arcade.enable(frog);
            frog.scale.x = game.rnd.realInRange(2.5, 2.5);
            frog.scale.y = game.rnd.realInRange(2.5, 2.5);
            frogMouth = game.add.sprite(-10, 980, 'invisible_line');
            game.physics.arcade.enable(frogMouth);
            frogMouth.enableBody = true;
            frogMouth.scale.x = game.rnd.realInRange(11 , 11);
            frogMouth.body.immovable = true;

    spider = game.add.sprite(180, game.world.height - 1000, 'spider')
    spider.scale.x = game.rnd.realInRange(.6, .6);
    spider.scale.y = game.rnd.realInRange(.6, .6);
    game.physics.arcade.enable(spider);

    spider.body.gravity.y = 10;
    spider.body.collideWorldBounds = true;
    

    // spider.animations.add('left', [0, 1, 2], 6, true);
    // spider.animations.add('right', [3, 4, 5], 6, true);

    cursors = game.input.keyboard.createCursorKeys();

    // set interval
    function createBranches(x, y, image, size, yVelocity){
        ledge = platforms.create(x, y, image);
        ledge.scale.x = game.rnd.realInRange(size, size);
        ledge.scale.y = game.rnd.realInRange(size, size);
        ledge.body.immovable = true;
        ledge.body.velocity.y = yVelocity;
    }



    function branches() {

        function waveOne() { 
            // right side
            branch1 = createBranches(510, 800, 'branch3', 2, -250);
            // left side
            // branch2 = createBranches(-100, 1200, 'branch4', 2, -250);
            // // right side
            // branch3 = createBranches(510, 1600, 'branch1', 2, -250);
            // // left side
            // branch4 = createBranches(-100, 2000, 'branch2', 2, -250);
            // // left side
            // branch5 = createBranches(0, 2400, 'branch4', 2, -250);
            // // right side
            // branch6 = createBranches(510, 2800, 'branch3', 2, -250);
            // // left side
            // branch7 = createBranches(-100, 3200, 'branch2', 2, -250);
            // // right side
            // branch8 = createBranches(410, 3600, 'branch1', 2, -250);
            // end of wave one
        };
        waveOne();

        // window.setTimeout(
        // function() {
        //     // left side
        //     branch9 = createBranches(-30, 800, 'branch4', 2, -350);
        //     // right side
        //     branch10 = createBranches(450, 1300, 'branch3', 2, -350);
        //     // left side
        //     branch11 = createBranches(-40, 1800, 'branch2', 2, -350);
        //     // right side
        //     branch12 = createBranches(460, 2300, 'branch1', 2, -350);
        //     // left side
        //     branch13 = createBranches(-35, 2800, 'branch4', 2, -350);
        //     // right side
        //     branch14 = createBranches(440, 3300, 'branch1', 2, -350);
        //     // right side
        //     branch15 = createBranches(410, 3800, 'branch3', 2, -350);
        //     // left side
        //     branch16 = createBranches(-40, 4300, 'branch2', 2, -350);
        //     // right side
        //     branch17 = createBranches(420, 4800, 'branch1', 2, -350);
        //     // end of wave 2
        //     console.log('WORKS');
        // }, 15000);

        // window.setTimeout(
        // function waveThree() {
        //     // left side
        //     branch18 = createBranches(-55, 800, 'branch4', 2, -450);
        //     // right side
        //     branch19 = createBranches(485, 1400, 'branch3', 2, -450);
        //     // left side
        //     branch20 = createBranches(-65, 2000, 'branch2', 2, -450);
        //     // right side
        //     branch21 = createBranches(480, 2600, 'branch1', 2, -450);
        //     // right side
        //     branch22 = createBranches(465, 3200, 'branch3', 2, -450);
        //     // left side
        //     branch23 = createBranches(-55, 3800, 'branch4', 2, -450);
        //     // right side
        //     branch24 = createBranches(440, 4200, 'branch3', 2, -450);
        // }, 30000);

        //frog
        window.setTimeout(
            // create frog function with increasing y velocity
            function(){
            frog.body.velocity.y = -100;
            frogMouth.body.velocity.y = -100;
            }, 40000);
    }


            //  Create our Timer
    timer = game.time.create(false);
    timer2 = game.time.create(false);

    //  Set a TimerEvent to occur after 2 seconds
    timer.loop(1000, updateCounter, this);
    timer2.loop(1, updateCounter2, this);

    //  Start the timer running - this is important!
    //  It won't start automatically, allowing you to hook it to button events and the like.
    timer.start();
    timer2.start();
    branches();
  }


  function update(){

    
    game.physics.arcade.collide(spider, platforms);
    // game.physics.arcade.collide(acorn, platforms);
    // game.physics.arcade.collide(acorn, spider);
    // game.physics.arcade.collide(spider, frog);

    game.physics.arcade.overlap(spider, frogMouth, winFunc, null, this);

    function winFunc(spider){
        spider.kill();
        frog.body.velocity.y = 100
        timer.stop();
        timer2.stop();
        console.log('WINNER!');
            var levelChange = function() {
            window.location.replace("http://reincarnage.herokuapp.com/games/level3")
       };

       $('body').fadeOut(3000, function(){levelChange();});
    }

    if (spider.body.touching.down)
    {
    spider.body.velocity.x = 0;
    // platforms.body.velocity.y = 0;
    branch1.body.velocity.y = 0;
    // branch2.body.velocity.y = 0;
    // branch3.body.velocity.y = 0;
    // branch4.body.velocity.y = 0;
    // branch5.body.velocity.y = 0;
    // branch6.body.velocity.y = 0;
    // branch7.body.velocity.y = 0;
    // branch8.body.velocity.y = 0;
    // branch9.body.velocity.y = 0;
    // branch10.body.velocity.y = 0;
    // branch11.body.velocity.y = 0;
    // branch12.body.velocity.y = 0;
    // branch13.body.velocity.y = 0;
    // branch14.body.velocity.y = 0;
    // branch15.body.velocity.y = 0;
    // branch16.body.velocity.y = 0;
    // branch17.body.velocity.y = 0;
    // branch18.body.velocity.y = 0;
    // branch19.body.velocity.y = 0;
    // branch20.body.velocity.y = 0;
    // branch21.body.velocity.y = 0;
    // branch22.body.velocity.y = 0;
    // branch23.body.velocity.y = 0;
    // branch24.body.velocity.y = 0;
    }
    // else {
    //     branch1.body.velocity.y = -250;
    // // //     branch2.body.velocity.y = -250;
    // // //     branch3.body.velocity.y = -250;
    // // //     // branch4.body.velocity.y = -250;
    // // //     // branch5.body.velocity.y = -250;
    // // //     // branch6.body.velocity.y = -250;
    // // //     // branch7.body.velocity.y = -250;
    // // //     // branch8.body.velocity.y = -250;
    // // //     // branch9.body.velocity.y = -350;
    // // //     // branch10.body.velocity.y = -350;
    // // //     // branch11.body.velocity.y = -350;
    // // //     // branch12.body.velocity.y = -350;
    // // //     // branch13.body.velocity.y = -350;
    // // //     // branch14.body.velocity.y = -350;
    // // //     // branch15.body.velocity.y = -350;
    // // //     // branch16.body.velocity.y = -350;
    // // //     // branch17.body.velocity.y = -350;
    // // //     // branch18.body.velocity.y = -350;
    // // //     // branch19.body.velocity.y = -450;
    // // //     // branch20.body.velocity.y = -450;
    // // //     // branch21.body.velocity.y = -450;
    // // //     // branch22.body.velocity.y = -450;
    // // //     // branch23.body.velocity.y = -450;
    // // //     // branch24.body.velocity.y = -450;  
    // }
    



    if (cursors.left.isDown)
    {
      //  spider to left
      if (spider.body.touching.down)
      {
      spider.body.velocity.x = -150
      }
      else
      {
      spider.body.velocity.x = -400
      }
    }
    else if (cursors.right.isDown)
    {
      //  spider right
      if (spider.body.touching.down)
      {
      spider.body.velocity.x = 150
      }
      else
      {
      spider.body.velocity.x = 400
      }
    }
    else
    {
      spider.animations.stop();

      spider.frame = 4;
    }

    if (cursors.up.isDown && !spider.body.touching.down)
    {
      spider.body.velocity.y = -200;
    }
    else if (cursors.down.isDown)
    {
      spider.body.velocity.y = 200;
    }

  }


function updateCounter() {

    total++;

}

function updateCounter2() {

    total2++;

}


  function render(){
    game.debug.text('TIME: ' + total + ':' + total2, 850, 20);

  }

  $(function(){
    $('body').hide();
    $('body').fadeIn(2000);

  })

  </script>