<script type="text/javascript">

  var game = new Phaser.Game(1024, 768, Phaser.AUTO, '', { preload: preload, create: create, update: update, render: render });

  function preload(){
    var images = {
        'tree': '/images/tree.png',
        
    }

    game.load.spritesheet('dude', '/images/dude.png', 32, 48);

    game.load.image('background', '/images/background.png');
    game.load.image('tree', '/images/tree.png');
    game.load.image('greenBackdrop', '/images/green_backdrop.png');
    game.load.image('level2background', '/images/tree.png');
    game.load.image('acorn1', '/images/acorn_1.png');
    game.load.image('acorn2', '/images/acorn_2.png');
    game.load.image('acorn3', '/images/acorn_3.png');
    game.load.image('acorn4', '/images/acorn_4.png');
    game.load.image('acorn5', '/images/acorn_5.png');
    game.load.image('branch1', '/images/h_branch_1.png');
    game.load.image('branch2', '/images/h_branch_2.png');
    game.load.image('branch3', '/images/h_branch_3.png');
    game.load.image('branch4', '/images/h_branch_4.png');
    game.load.image('spider', '/images/spider_bigger_face.png');
    game.load.image('cloud2', '/images/cloud_2.png');
    game.load.image('cloud5', '/images/cloud_5.png');
    // level 2 images
    // game.load.image('webstring', '/images/webstring');
    // game.load.spritesheet('hangingspider', '/images/hangingspider');
    // game.load.spritesheet('spidermouth', '/images/spidermouth');
    // level 3 images
    game.load.image('smilingFrog', '/images/frog_mouth_open.png');
    game.load.image('frog', '/images/frog_mouth_closed.png');
    // game.load.spritesheet('spidertongue', '/images/spidertongue');
    // game.load.spritesheet('fly1', '/images/fly1');
    // game.load.spritesheet('fly2', '/images/fly2');
  }

  var platforms;

    var timer;
    var timer2;
    var total = 0;
    var total2 = 0;

  function create(){

    game.physics.startSystem(Phaser.Physics.ARCADE);

    // tree = game.add.image(-3300, -9000, 'level2background');
    // tree.scale.x = game.rnd.realInRange(19, 19);
    // tree.scale.y = game.rnd.realInRange(19, 19);

    // background image and scaled
    background = game.add.image(0, -1000, 'background');
    background.scale.x = game.rnd.realInRange(4, 4);
    background.scale.y = game.rnd.realInRange(4, 4);

    createCloud = function(x, y, xVelocity, image)
    {
        cloud = game.add.sprite(x, y, image);
        game.physics.arcade.enable(cloud);
        cloud.enableBody = true;
        cloud.body.immovable = true;
        cloud.body.collideWorldBounds = true;
        cloud.body.velocity.y = -5;
        cloud.body.velocity.x = xVelocity;
        cloud.body.bounce.setTo(1, 1);
    }

    createCloud(755, 445, -3, 'cloud2');
    createCloud(35, 280, 5, 'cloud5');

    platforms = game.add.group();

    platforms.enableBody = true;

    cursors = game.input.keyboard.createCursorKeys();


    spider = game.add.sprite(780, game.world.height - 1000, 'spider')
    spider.scale.x = game.rnd.realInRange(.6, .6);
    spider.scale.y = game.rnd.realInRange(.6, .6);
    game.physics.arcade.enable(spider);

    spider.body.gravity.y = 10;
    spider.body.collideWorldBounds = true;


            frog = game.add.sprite(400, 800, 'smilingFrog');
            game.physics.arcade.enable(frog);
            frog.scale.x = game.rnd.realInRange(2.5, 2.5);
            frog.scale.y = game.rnd.realInRange(2.5, 2.5);

    

    // spider.animations.add('left', [0, 1, 2], 6, true);
    // spider.animations.add('right', [3, 4, 5], 6, true);

    cursors = game.input.keyboard.createCursorKeys();

    // set interval
    function createBranches(x, y, image, size, yVelocity){
        ledge = platforms.create(x, y, image);
        ledge.scale.x = game.rnd.realInRange(size, size);
        ledge.scale.y = game.rnd.realInRange(size, size);
        ledge.body.immovable = true;
        ledge.body.velocity.y = yVelocity;
    }



    function branches() {

        function waveOne() { 
            // left side
            createBranches(0, 800, 'branch4', 2, -250);
            // right side
            createBranches(410, 1200, 'branch3', 2, -250);
            // left side
            createBranches(0, 1600, 'branch2', 2, -250);
            // right side
            createBranches(410, 2000, 'branch1', 2, -250);
            // left side
            createBranches(0, 2400, 'branch4', 2, -250);
            // right side
            createBranches(410, 2800, 'branch3', 2, -250);
            // left side
            createBranches(0, 3200, 'branch2', 2, -250);
            // left side
            createBranches(0, 3600, 'branch4', 2, -250);
            // end of wave one
        };
        waveOne();

        window.setTimeout(
        function() {
            // left side
            createBranches(-40, 800, 'branch4', 2, -350);
            // right side
            createBranches(450, 1300, 'branch3', 2, -350);
            // left side
            createBranches(-40, 1800, 'branch2', 2, -350);
            // right side
            createBranches(450, 2300, 'branch1', 2, -350);
            // left side
            createBranches(-40, 2800, 'branch4', 2, -350);
            // right side
            createBranches(450, 3300, 'branch1', 2, -350);
            // right side
            createBranches(450, 3800, 'branch3', 2, -350);
            // left side
            createBranches(-40, 4300, 'branch2', 2, -350);
            // right side
            createBranches(450, 4800, 'branch1', 2, -350);
            // end of wave 2
            console.log('WORKS');
        }, 15000);

        window.setTimeout(
        function waveThree() {
            // left side
            createBranches(-75, 800, 'branch4', 2, -450);
            // right side
            createBranches(485, 1400, 'branch3', 2, -450);
            // left side
            createBranches(-75, 2000, 'branch2', 2, -450);
            // right side
            createBranches(485, 2600, 'branch1', 2, -450);
            // right side
            createBranches(485, 3200, 'branch3', 2, -450);
            // left side
            createBranches(-75, 3800, 'branch4', 2, -450);
            // right side
            createBranches(485, 4200, 'branch3', 2, -450);
        }, 30000);

        //frog
        window.setTimeout(
            // create frog function with increasing y velocity
            function(){
            frog.body.velocity.y = -100;
            }, 40000);
    }
    branches();


            //  Create our Timer
    timer = game.time.create(false);
    timer2 = game.time.create(false);

    //  Set a TimerEvent to occur after 2 seconds
    timer.loop(1000, updateCounter, this);
    timer2.loop(1, updateCounter2, this);

    //  Start the timer running - this is important!
    //  It won't start automatically, allowing you to hook it to button events and the like.
    timer.start();
    timer2.start();
  }

  function update(){

    
    game.physics.arcade.collide(spider, platforms);
    // game.physics.arcade.collide(acorn, platforms);
    // game.physics.arcade.collide(acorn, spider);
    // game.physics.arcade.collide(spider, frog);

    game.physics.arcade.overlap(spider, frog, winFunc, null, this);

    function winFunc(spider, frog){
        spider.kill();
        timer.stop();
        timer2.stop();
        console.log('WINNER!');
            var levelChange = function() {
            window.location.replace("http://localhost:3000/games/level3")
       };

       $('body').fadeOut(3000, function(){levelChange();});
    }

    if (spider.body.touching.down)
    {
    spider.body.velocity.x = 0;
    }

    if (cursors.left.isDown)
    {
      //  spider to left
      if (spider.body.touching.down)
      {
      spider.body.velocity.x = -150
      }
      else
      {
      spider.body.velocity.x = -400
      }
    }
    else if (cursors.right.isDown)
    {
      //  spider right
      if (spider.body.touching.down)
      {
      spider.body.velocity.x = 150
      }
      else
      {
      spider.body.velocity.x = 400
      }
    }
    else
    {
      spider.animations.stop();

      spider.frame = 4;
    }

    if (cursors.up.isDown && !spider.body.touching.down)
    {
      spider.body.velocity.y = -200;
    }
    else if (cursors.down.isDown)
    {
      spider.body.velocity.y = 200;
    }

  }


function updateCounter() {

    total++;

}

function updateCounter2() {

    total2++;

}


  function render(){
    game.debug.text('TIME: ' + total + ':' + total2, 850, 20);

  }

  $(function(){
    $('body').hide();
    $('body').fadeIn(2000);

  })

  </script>